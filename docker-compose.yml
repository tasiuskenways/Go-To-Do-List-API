services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ${CONTAINER_DB_NAME}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ${CONTAINER_REDIS_NAME}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env
    # Add password if specified
    command: >
      sh -c "
        if [ -n '${REDIS_PASSWORD}' ]; then
          redis-server --requirepass '${REDIS_PASSWORD}'
        else
          redis-server
        fi
      "

  # Go Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        APP_PORT: ${APP_PORT}
    container_name: ${CONTAINER_APP_NAME}
    restart: unless-stopped
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - JWT_SECRET=${JWT_SECRET}
      - APP_PORT=${APP_PORT}
      - APP_ENV=${APP_ENV}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - HYBRID_ENCRYPTION_PRIVATE_KEY_PATH=${HYBRID_ENCRYPTION_PRIVATE_KEY_PATH}
      - HYBRID_ENCRYPTION_PUBLIC_KEY_PATH=${HYBRID_ENCRYPTION_PUBLIC_KEY_PATH}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    env_file:
      - .env

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge